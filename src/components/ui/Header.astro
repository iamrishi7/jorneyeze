---
import { frameworks } from "../../data/navigation";
import GitHubButton from "./GitHubButton.astro";

const currentPath = Astro.url.pathname;
const isActivePath = (path: string) => {
  const normalizedCurrent = currentPath.replace(/\/+$/, "").toLowerCase();
  const normalizedPath = path.replace(/\/+$/, "").toLowerCase();
  return path === "/"
    ? normalizedCurrent === "" || normalizedCurrent === "/"
    : normalizedCurrent.endsWith(normalizedPath);
};

const GITHUB_USER = "Marve10s";
const REPO_NAME = "UltimateAstroTemplate";

const stars = await fetch(
  `https://api.github.com/repos/${GITHUB_USER}/${REPO_NAME}`
)
  .then((res) => (res.ok ? res.json() : Promise.reject("Failed to fetch")))
  .then((data) => data.stargazers_count)
  .catch(() => 0);
---

<header class="top-0 left-0 right-0 z-50">
</header>

<script>
  function setupMobileMenu() {
    const button = document.getElementById("mobile-menu-button");
    const closeButton = document.getElementById("mobile-menu-close");
    const menu = document.getElementById("mobile-menu");
    const body = document.body;

    if (
      !button ||
      !closeButton ||
      !menu ||
      !button.parentNode ||
      !closeButton.parentNode
    ) {
      console.warn("Mobile menu elements not found");
      return;
    }

    // Create new buttons with event listeners
    const newButton = button.cloneNode(true) as HTMLButtonElement;
    const newCloseButton = closeButton.cloneNode(true) as HTMLButtonElement;

    const toggleMenu = () => {
      menu.classList.toggle("hidden");
      body.style.overflow = menu.classList.contains("hidden") ? "" : "hidden";
    };

    // Add event listeners to new buttons
    newButton.addEventListener("click", toggleMenu);
    newCloseButton.addEventListener("click", toggleMenu);

    // Replace old buttons with new ones
    button.parentNode.replaceChild(newButton, button);
    closeButton.parentNode.replaceChild(newCloseButton, closeButton);

    // Close menu when clicking outside
    const handleOutsideClick = (e: MouseEvent) => {
      const target = e.target as HTMLElement;
      if (target === menu) {
        toggleMenu();
      }
    };
    menu.addEventListener("click", handleOutsideClick);

    // Close menu on escape key
    const handleEscKey = (e: KeyboardEvent) => {
      if (e.key === "Escape" && !menu.classList.contains("hidden")) {
        toggleMenu();
      }
    };
    document.addEventListener("keydown", handleEscKey);

    // Cleanup function
    return () => {
      menu.removeEventListener("click", handleOutsideClick);
      document.removeEventListener("keydown", handleEscKey);
    };
  }

  let cleanup: (() => void) | undefined;

  // Run setup immediately if document is already loaded
  if (document.readyState === "complete") {
    cleanup = setupMobileMenu();
  } else {
    // Otherwise wait for DOMContentLoaded
    document.addEventListener("DOMContentLoaded", () => {
      cleanup = setupMobileMenu();
    });
  }

  // Setup after each navigation with View Transitions
  document.addEventListener("astro:page-load", () => {
    if (cleanup) {
      cleanup();
    }
    cleanup = setupMobileMenu();
  });

  // Cleanup when leaving page
  document.addEventListener("astro:before-swap", () => {
    if (cleanup) {
      cleanup();
    }
    const menu = document.getElementById("mobile-menu");
    const body = document.body;
    if (menu && !menu.classList.contains("hidden")) {
      menu.classList.add("hidden");
      body.style.overflow = "";
    }
  });
</script>
